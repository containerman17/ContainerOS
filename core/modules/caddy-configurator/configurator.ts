import { Thenable } from "consul";
import { object } from "superstruct";
import { keyable } from "../../definitions";
import consul from "../../lib/database/consulInstance"
import axios from "axios"

//TODO: this whole configurator should be just a caddy plugin

async function start() {
    console.log('caddy configurator starting')

    var watch = consul.watch({
        method: consul.health.state,
        // @ts-ignore: wrong ts typing in library
        options: { state: 'any' },
        backoffFactor: 1000,
        maxAttempts: 500
    });

    watch.on('change', async function (data, res) {
        const passingServices: Set<string> = new Set()
        const notPassingDomains: Set<string> = new Set()

        for (let check of data) {
            for (let tag of check.ServiceTags) {
                if (tag.startsWith('routerDomain-')) {
                    if (check.Status === 'passing') {
                        passingServices.add(check.ServiceName)
                    } else {
                        notPassingDomains.add(tag.replace('routerDomain-', ''))
                    }
                }
            }
        }

        //TODO: a lot of load on consul here. optimize
        const nodesPromises: Thenable<any[]>[] = [...passingServices].map(serviceName => consul.catalog.service.nodes(serviceName))
        const nodesReponses: any[][] = await Promise.all(nodesPromises)

        const domainsToIps = {}
        for (let response of nodesReponses) {
            for (let serviceInstance of response) {
                const domain = serviceInstance.ServiceTags
                    .filter(domain => domain.startsWith('routerDomain-'))[0]
                    .replace('routerDomain-', '')
                console.log('domain', domain)
                if (!domainsToIps[domain]) domainsToIps[domain] = []
                domainsToIps[domain].push(`${serviceInstance.Address}:${serviceInstance.ServicePort}`)
            }
        }

        const caddyConf = {
            "listen": [":443"],
            "routes": []
        }
        for (let domain of Object.keys(domainsToIps)) {
            notPassingDomains.delete(domain)//just make sure it is not in notPassingDomains list
            caddyConf.routes.push({
                "handle": [{
                    "handler": "subroute",
                    "routes": [{
                        "handle": domainsToIps[domain].map(address => ({
                            "handler": "reverse_proxy", "upstreams": [{ "dial": address }]
                        }))
                    }]
                }],
                "match": [{ "host": [domain] }],
                "terminal": true
            })
        }

        for (let domain of notPassingDomains) {
            caddyConf.routes.push({
                "handle": [{
                    "handler": "subroute",
                    "routes": [
                        {
                            "handle": [{
                                "handler": "static_response",
                                "body": "Your docker containers do not respond on http requests. Please check that the correct port is exposed. Generated by ContainerOS."
                            }]
                        }]
                }],
                "match": [{ "host": [domain] }],
                "terminal": true
            })
        }
        await axios.post("http://localhost:2019/config/apps/http/", { "servers": { "srv0": caddyConf } })
    });

    watch.on('error', function (err) {
        console.error(`watch error on consul.health.state:`, err);
        process.exit(1)
    });
}

export default { start }

if (require.main === module) {
    process.on('unhandledRejection',
        (reason, p) => {
            console.error('Unhandled Rejection at:', p, 'reason:', reason)
            process.exit(1)
        });
    start();
}
